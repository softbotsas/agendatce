const mongoose = require('mongoose');
require('dotenv').config();

// Configuraci√≥n de la base de datos
const config = {
  // URI de conexi√≥n
  uri: process.env.MONGODB_URI || 'mongodb://localhost:27017/nominatce',
  
  // Opciones de conexi√≥n
  options: {
    // autoIndex: process.env.NODE_ENV !== 'production',
    // bufferCommands: false, // Deshabilitar buffering para mejor manejo de errores
  },
  
  // Configuraci√≥n de sesiones
  session: {
    collectionName: 'sessions',
    ttl: 14 * 24 * 60 * 60, // 14 d√≠as en segundos
    autoRemove: 'native',
  }
};

// Funci√≥n para conectar a la base de datos
const connectDB = async () => {
  try {
    // Verificar si ya est√° conectado
    if (mongoose.connection.readyState === 1) {
      console.log('‚úÖ MongoDB ya est√° conectado');
      return;
    }

    // Conectar a MongoDB
    await mongoose.connect(config.uri, config.options);
    console.log('‚úÖ Conectado a MongoDB exitosamente');
    
    // Eventos de conexi√≥n
    mongoose.connection.on('error', (err) => {
      console.error('‚ùå Error de MongoDB:', err);
    });
    
    mongoose.connection.on('disconnected', () => {
      console.warn('‚ö†Ô∏è MongoDB desconectado');
    });
    
    mongoose.connection.on('reconnected', () => {
      console.log('üîÑ MongoDB reconectado');
    });
    
  } catch (error) {
    console.error('‚ùå Error conectando a MongoDB:', error);
    process.exit(1);
  }
};

// Funci√≥n para desconectar
const disconnectDB = async () => {
  try {
    await mongoose.connection.close();
    console.log('‚úÖ Desconectado de MongoDB');
  } catch (error) {
    console.error('‚ùå Error desconectando de MongoDB:', error);
  }
};

module.exports = {
  config,
  connectDB,
  disconnectDB
};



